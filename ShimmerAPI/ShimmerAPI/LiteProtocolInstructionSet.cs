// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/LiteProtocolInstructionSet.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.shimmerresearch.radioprotocol {

  /// <summary>Holder for reflection information generated from src/LiteProtocolInstructionSet.proto</summary>
  public static partial class LiteProtocolInstructionSetReflection {

    #region Descriptor
    /// <summary>File descriptor for src/LiteProtocolInstructionSet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LiteProtocolInstructionSetReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRzcmMvTGl0ZVByb3RvY29sSW5zdHJ1Y3Rpb25TZXQucHJvdG8SCHR1dG9y",
            "aWFsGiBnb29nbGUvcHJvdG9idWYvZGVzY3JpcHRvci5wcm90byLIKAoaTGl0",
            "ZVByb3RvY29sSW5zdHJ1Y3Rpb25TZXQisA0KD0luc3RydWN0aW9uc1NldBIP",
            "CgtEQVRBX1BBQ0tFVBAAEh0KGVNFVF9TQU1QTElOR19SQVRFX0NPTU1BTkQQ",
            "BRIWChJUT0dHTEVfTEVEX0NPTU1BTkQQBhIbChdTVEFSVF9TVFJFQU1JTkdf",
            "Q09NTUFORBAHEhcKE1NFVF9TRU5TT1JTX0NPTU1BTkQQCBIhCh1TRVRfQUND",
            "RUxfU0VOU0lUSVZJVFlfQ09NTUFORBAJEhwKGFNFVF81Vl9SRUdVTEFUT1Jf",
            "Q09NTUFORBAMEhQKEFNFVF9QTVVYX0NPTU1BTkQQDRIcChhTRVRfQ09ORklH",
            "X0JZVEUwX0NPTU1BTkQQDhIaChZTVE9QX1NUUkVBTUlOR19DT01NQU5EECAS",
            "IQodU0VUX0FDQ0VMX0NBTElCUkFUSU9OX0NPTU1BTkQQERIsCihTRVRfTFNN",
            "MzAzRExIQ19BQ0NFTF9DQUxJQlJBVElPTl9DT01NQU5EEBoSIAocU0VUX0dZ",
            "Uk9fQ0FMSUJSQVRJT05fQ09NTUFORBAUEh8KG1NFVF9NQUdfQ0FMSUJSQVRJ",
            "T05fQ09NTUFORBAXEhkKFVNFVF9HU1JfUkFOR0VfQ09NTUFORBAhEh8KG1NF",
            "VF9FTUdfQ0FMSUJSQVRJT05fQ09NTUFORBAmEh8KG1NFVF9FQ0dfQ0FMSUJS",
            "QVRJT05fQ09NTUFORBApEhEKDVNFVF9CTElOS19MRUQQMBIeChpTRVRfR1lS",
            "T19URU1QX1ZSRUZfQ09NTUFORBAzEhsKF1NFVF9CVUZGRVJfU0laRV9DT01N",
            "QU5EEDQSGAoUU0VUX01BR19HQUlOX0NPTU1BTkQQNxIhCh1TRVRfTUFHX1NB",
            "TVBMSU5HX1JBVEVfQ09NTUFORBA6EiMKH1NFVF9BQ0NFTF9TQU1QTElOR19S",
            "QVRFX0NPTU1BTkQQQBInCiNTRVRfTFNNMzAzRExIQ19BQ0NFTF9MUE1PREVf",
            "Q09NTUFORBBDEicKI1NFVF9MU00zMDNETEhDX0FDQ0VMX0hSTU9ERV9DT01N",
            "QU5EEEYSIgoeU0VUX01QVTkxNTBfR1lST19SQU5HRV9DT01NQU5EEEkSJQoh",
            "U0VUX01QVTkxNTBfU0FNUExJTkdfUkFURV9DT01NQU5EEEwSJgoiU0VUX0JN",
            "UDE4MF9QUkVTX1JFU09MVVRJT05fQ09NTUFORBBSEicKI1NFVF9CTVAxODBf",
            "UFJFU19DQUxJQlJBVElPTl9DT01NQU5EEFUSKgomUkVTRVRfVE9fREVGQVVM",
            "VF9DT05GSUdVUkFUSU9OX0NPTU1BTkQQWhIjCh9SRVNFVF9DQUxJQlJBVElP",
            "Tl9WQUxVRV9DT01NQU5EEFsSKQolU0VUX0lOVEVSTkFMX0VYUF9QT1dFUl9F",
            "TkFCTEVfQ09NTUFORBBeEhgKFFNFVF9FWEdfUkVHU19DT01NQU5EEGESGQoV",
            "U0VUX0JBVURfUkFURV9DT01NQU5EEGoSHQoZU0VUX0RFUklWRURfQ0hBTk5F",
            "TF9CWVRFUxBtEhYKElNUQVJUX1NEQlRfQ09NTUFORBBwEhwKGFNFVF9UUklB",
            "TF9DT05GSUdfQ09NTUFORBBzEhYKElNFVF9DRU5URVJfQ09NTUFORBB2EhsK",
            "F1NFVF9TSElNTUVSTkFNRV9DT01NQU5EEHkSFQoRU0VUX0VYUElEX0NPTU1B",
            "TkQQfBIUChBTRVRfTVlJRF9DT01NQU5EEH8SGQoUU0VUX05TSElNTUVSX0NP",
            "TU1BTkQQggESGwoWU0VUX0NPTkZJR1RJTUVfQ09NTUFORBCFARIYChNTRVRf",
            "SU5GT01FTV9DT01NQU5EEIwBEhQKD1NFVF9DUkNfQ09NTUFORBCLARIUCg9T",
            "RVRfUldDX0NPTU1BTkQQjwESGgoVUk9VVElORV9DT01NVU5JQ0FUSU9OEOAB",
            "EhoKFUFDS19DT01NQU5EX1BST0NFU1NFRBD/ARIfChpTVEFSVF9MT0dHSU5H",
            "X09OTFlfQ09NTUFORBCSARIeChlTVE9QX0xPR0dJTkdfT05MWV9DT01NQU5E",
            "EJMBEhwKF1RFU1RfQ09OTkVDVElPTl9DT01NQU5EEJYBEhYKEVNUT1BfU0RC",
            "VF9DT01NQU5EEJcBEhsKFlNFVF9DQUxJQl9EVU1QX0NPTU1BTkQQmAESHgoZ",
            "VVBEX0NPTkZJR19NRU1PUllfQ09NTUFORBCbARIrCiZTRVRfSTJDX0JBVFRf",
            "U1RBVFVTX0ZSRVFfQ09NTUFORF9WQUxVRRCcASKvDAoPSW5zdHJ1Y3Rpb25z",
            "R2V0EhAKDE5PVF9VU0VEX0dFVBAAEhMKD0lOUVVJUllfQ09NTUFORBABEh0K",
            "GUdFVF9TQU1QTElOR19SQVRFX0NPTU1BTkQQAxIhCh1HRVRfQUNDRUxfU0VO",
            "U0lUSVZJVFlfQ09NTUFORBALEhwKGEdFVF9DT05GSUdfQllURTBfQ09NTUFO",
            "RBAQEiwKKEdFVF9MU00zMDNETEhDX0FDQ0VMX0NBTElCUkFUSU9OX0NPTU1B",
            "TkQQHBIhCh1HRVRfQUNDRUxfQ0FMSUJSQVRJT05fQ09NTUFORBATEiAKHEdF",
            "VF9HWVJPX0NBTElCUkFUSU9OX0NPTU1BTkQQFhIfChtHRVRfTUFHX0NBTElC",
            "UkFUSU9OX0NPTU1BTkQQGRIZChVHRVRfR1NSX1JBTkdFX0NPTU1BTkQQIxIf",
            "ChtHRVRfU0hJTU1FUl9WRVJTSU9OX0NPTU1BTkQQJBIjCh9HRVRfU0hJTU1F",
            "Ul9WRVJTSU9OX0NPTU1BTkRfTkVXED8SHwobR0VUX0VNR19DQUxJQlJBVElP",
            "Tl9DT01NQU5EECgSHwobR0VUX0VDR19DQUxJQlJBVElPTl9DT01NQU5EECsS",
            "HwobR0VUX0FMTF9DQUxJQlJBVElPTl9DT01NQU5EECwSGgoWR0VUX0ZXX1ZF",
            "UlNJT05fQ09NTUFORBAuEhEKDUdFVF9CTElOS19MRUQQMhIbChdHRVRfQlVG",
            "RkVSX1NJWkVfQ09NTUFORBA2EhgKFEdFVF9NQUdfR0FJTl9DT01NQU5EEDkS",
            "IQodR0VUX01BR19TQU1QTElOR19SQVRFX0NPTU1BTkQQPBIjCh9HRVRfQUND",
            "RUxfU0FNUExJTkdfUkFURV9DT01NQU5EEEISJwojR0VUX0xTTTMwM0RMSENf",
            "QUNDRUxfTFBNT0RFX0NPTU1BTkQQRRInCiNHRVRfTFNNMzAzRExIQ19BQ0NF",
            "TF9IUk1PREVfQ09NTUFORBBIEiIKHkdFVF9NUFU5MTUwX0dZUk9fUkFOR0Vf",
            "Q09NTUFORBBLEiUKIUdFVF9NUFU5MTUwX1NBTVBMSU5HX1JBVEVfQ09NTUFO",
            "RBBOEiYKIkdFVF9CTVAxODBfUFJFU19SRVNPTFVUSU9OX0NPTU1BTkQQVBIn",
            "CiNHRVRfQk1QMTgwX1BSRVNfQ0FMSUJSQVRJT05fQ09NTUFORBBXEi8KK0dF",
            "VF9CTVAxODBfQ0FMSUJSQVRJT05fQ09FRkZJQ0lFTlRTX0NPTU1BTkQQWRIp",
            "CiVHRVRfTVBVOTE1MF9NQUdfU0VOU19BREpfVkFMU19DT01NQU5EEF0SKQol",
            "R0VUX0lOVEVSTkFMX0VYUF9QT1dFUl9FTkFCTEVfQ09NTUFORBBgEhgKFEdF",
            "VF9FWEdfUkVHU19DT01NQU5EEGMSIAocR0VUX0RBVUdIVEVSX0NBUkRfSURf",
            "Q09NTUFORBBmEhkKFUdFVF9CQVVEX1JBVEVfQ09NTUFORBBsEh0KGUdFVF9E",
            "RVJJVkVEX0NIQU5ORUxfQllURVMQbxIWChJHRVRfU1RBVFVTX0NPTU1BTkQQ",
            "chIcChhHRVRfVFJJQUxfQ09ORklHX0NPTU1BTkQQdRIWChJHRVRfQ0VOVEVS",
            "X0NPTU1BTkQQeBIbChdHRVRfU0hJTU1FUk5BTUVfQ09NTUFORBB7EhUKEUdF",
            "VF9FWFBJRF9DT01NQU5EEH4SFQoQR0VUX01ZSURfQ09NTUFORBCBARIZChRH",
            "RVRfTlNISU1NRVJfQ09NTUFORBCEARIbChZHRVRfQ09ORklHVElNRV9DT01N",
            "QU5EEIcBEhQKD0dFVF9ESVJfQ09NTUFORBCJARIYChNHRVRfSU5GT01FTV9D",
            "T01NQU5EEI4BEhQKD0dFVF9SV0NfQ09NTUFORBCRARIWChFHRVRfVkJBVFRf",
            "Q09NTUFORBCVARIbChZHRVRfQ0FMSUJfRFVNUF9DT01NQU5EEJoBEiYKIUdF",
            "VF9JMkNfQkFUVF9TVEFUVVNfQ09NTUFORF9WQUxVRRCeARIwCitHRVRfQk1Q",
            "MjgwX0NBTElCUkFUSU9OX0NPRUZGSUNJRU5UU19DT01NQU5EEJ8BIogOChRJ",
            "bnN0cnVjdGlvbnNSZXNwb25zZRIVChFOT1RfVVNFRF9SRVNQT05TRRAAEhQK",
            "EElOUVVJUllfUkVTUE9OU0UQAhIgChZTQU1QTElOR19SQVRFX1JFU1BPTlNF",
            "EAQaBJi1GAISJAoaQUNDRUxfU0VOU0lUSVZJVFlfUkVTUE9OU0UQChoEmLUY",
            "ARIfChVDT05GSUdfQllURTBfUkVTUE9OU0UQDxoEmLUYBBIkChpBQ0NFTF9D",
            "QUxJQlJBVElPTl9SRVNQT05TRRASGgSYtRgVEi8KJUxTTTMwM0RMSENfQUND",
            "RUxfQ0FMSUJSQVRJT05fUkVTUE9OU0UQGxoEmLUYFRIjChlHWVJPX0NBTElC",
            "UkFUSU9OX1JFU1BPTlNFEBUaBJi1GBUSIgoYTUFHX0NBTElCUkFUSU9OX1JF",
            "U1BPTlNFEBgaBJi1GBUSHAoSR1NSX1JBTkdFX1JFU1BPTlNFECIaBJi1GAES",
            "JgocR0VUX1NISU1NRVJfVkVSU0lPTl9SRVNQT05TRRAlGgSYtRgBEiIKGEVN",
            "R19DQUxJQlJBVElPTl9SRVNQT05TRRAnGgSYtRgEEiIKGEVDR19DQUxJQlJB",
            "VElPTl9SRVNQT05TRRAqGgSYtRgEEiIKGEFMTF9DQUxJQlJBVElPTl9SRVNQ",
            "T05TRRAtGgSYtRhUEh0KE0ZXX1ZFUlNJT05fUkVTUE9OU0UQLxoEmLUYBhIc",
            "ChJCTElOS19MRURfUkVTUE9OU0UQMRoEmLUYARIeChRCVUZGRVJfU0laRV9S",
            "RVNQT05TRRA1GgSYtRgBEhsKEU1BR19HQUlOX1JFU1BPTlNFEDgaBJi1GAES",
            "JAoaTUFHX1NBTVBMSU5HX1JBVEVfUkVTUE9OU0UQOxoEmLUYARImChxBQ0NF",
            "TF9TQU1QTElOR19SQVRFX1JFU1BPTlNFEEEaBJi1GAESKgogTFNNMzAzRExI",
            "Q19BQ0NFTF9MUE1PREVfUkVTUE9OU0UQRBoEmLUYARIqCiBMU00zMDNETEhD",
            "X0FDQ0VMX0hSTU9ERV9SRVNQT05TRRBHGgSYtRgBEiUKG01QVTkxNTBfR1lS",
            "T19SQU5HRV9SRVNQT05TRRBKGgSYtRgBEigKHk1QVTkxNTBfU0FNUExJTkdf",
            "UkFURV9SRVNQT05TRRBNGgSYtRgBEikKH0JNUDE4MF9QUkVTX1JFU09MVVRJ",
            "T05fUkVTUE9OU0UQUxoEmLUYARIkCiBCTVAxODBfUFJFU19DQUxJQlJBVElP",
            "Tl9SRVNQT05TRRBWEjIKKEJNUDE4MF9DQUxJQlJBVElPTl9DT0VGRklDSUVO",
            "VFNfUkVTUE9OU0UQWBoEmLUYFhImCiJNUFU5MTUwX01BR19TRU5TX0FESl9W",
            "QUxTX1JFU1BPTlNFEFwSLAoiSU5URVJOQUxfRVhQX1BPV0VSX0VOQUJMRV9S",
            "RVNQT05TRRBfGgSYtRgBEhsKEUVYR19SRUdTX1JFU1BPTlNFEGIaBJi1GAsS",
            "IwoZREFVR0hURVJfQ0FSRF9JRF9SRVNQT05TRRBlGgSYtRgDEhwKEkJBVURf",
            "UkFURV9SRVNQT05TRRBrGgSYtRgBEigKHkRFUklWRURfQ0hBTk5FTF9CWVRF",
            "U19SRVNQT05TRRBuGgSYtRgDEhkKD1NUQVRVU19SRVNQT05TRRBxGgSYtRgB",
            "Eh8KFVRSSUFMX0NPTkZJR19SRVNQT05TRRB0GgSYtRgDEiIKD0NFTlRFUl9S",
            "RVNQT05TRRB3Gg2YtRj///////////8BEicKFFNISU1NRVJOQU1FX1JFU1BP",
            "TlNFEHoaDZi1GP///////////wESIQoORVhQSURfUkVTUE9OU0UQfRoNmLUY",
            "////////////ARIYCg1NWUlEX1JFU1BPTlNFEIABGgSYtRgBEhwKEU5TSElN",
            "TUVSX1JFU1BPTlNFEIMBGgSYtRgBEicKE0NPTkZJR1RJTUVfUkVTUE9OU0UQ",
            "hgEaDZi1GP///////////wESIAoMRElSX1JFU1BPTlNFEIgBGg2YtRj/////",
            "//////8BEhoKFUlOU1RSRUFNX0NNRF9SRVNQT05TRRCKARIkChBJTkZPTUVN",
            "X1JFU1BPTlNFEI0BGg2YtRj///////////8BEhcKDFJXQ19SRVNQT05TRRCQ",
            "ARoEmLUYCBIZCg5WQkFUVF9SRVNQT05TRRCUARoEmLUYAxIqChZSU1BfQ0FM",
            "SUJfRFVNUF9DT01NQU5EEJkBGg2YtRj///////////8BEiwKIVJTUF9JMkNf",
            "QkFUVF9TVEFUVVNfQ09NTUFORF9WQUxVRRCdARoEmLUYChIzCihCTVAyODBf",
            "Q0FMSUJSQVRJT05fQ09FRkZJQ0lFTlRTX1JFU1BPTlNFEKABGgSYtRgYMjoK",
            "DXJlc3BvbnNlX3NpemUSIS5nb29nbGUucHJvdG9idWYuRW51bVZhbHVlT3B0",
            "aW9ucxjThgMgASgFQnAKJ2NvbS5zaGltbWVycmVzZWFyY2guY29tbXMucmFk",
            "aW9Qcm90b2NvbEIhU2hpbW1lckxpdGVQcm90b2NvbEluc3RydWN0aW9uU2V0",
            "qgIhY29tLnNoaW1tZXJyZXNlYXJjaC5yYWRpb3Byb3RvY29sYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { pbr::FileDescriptor.DescriptorProtoFileDescriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.shimmerresearch.radioprotocol.LiteProtocolInstructionSet), global::com.shimmerresearch.radioprotocol.LiteProtocolInstructionSet.Parser, null, null, new[]{ typeof(global::com.shimmerresearch.radioprotocol.LiteProtocolInstructionSet.Types.InstructionsSet), typeof(global::com.shimmerresearch.radioprotocol.LiteProtocolInstructionSet.Types.InstructionsGet), typeof(global::com.shimmerresearch.radioprotocol.LiteProtocolInstructionSet.Types.InstructionsResponse) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LiteProtocolInstructionSet : pb::IMessage<LiteProtocolInstructionSet> {
    private static readonly pb::MessageParser<LiteProtocolInstructionSet> _parser = new pb::MessageParser<LiteProtocolInstructionSet>(() => new LiteProtocolInstructionSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiteProtocolInstructionSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.shimmerresearch.radioprotocol.LiteProtocolInstructionSetReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiteProtocolInstructionSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiteProtocolInstructionSet(LiteProtocolInstructionSet other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiteProtocolInstructionSet Clone() {
      return new LiteProtocolInstructionSet(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiteProtocolInstructionSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiteProtocolInstructionSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiteProtocolInstructionSet other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LiteProtocolInstructionSet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///response_size = -1, this means that the 1st rx byte is the length of the payload
      /// </summary>
      public enum InstructionsSet {
        [pbr::OriginalName("DATA_PACKET")] DataPacket = 0,
        [pbr::OriginalName("SET_SAMPLING_RATE_COMMAND")] SetSamplingRateCommand = 5,
        [pbr::OriginalName("TOGGLE_LED_COMMAND")] ToggleLedCommand = 6,
        [pbr::OriginalName("START_STREAMING_COMMAND")] StartStreamingCommand = 7,
        [pbr::OriginalName("SET_SENSORS_COMMAND")] SetSensorsCommand = 8,
        [pbr::OriginalName("SET_ACCEL_SENSITIVITY_COMMAND")] SetAccelSensitivityCommand = 9,
        /// <summary>
        /// only Shimmer 2
        /// </summary>
        [pbr::OriginalName("SET_5V_REGULATOR_COMMAND")] Set5VRegulatorCommand = 12,
        /// <summary>
        /// only Shimmer 2
        /// </summary>
        [pbr::OriginalName("SET_PMUX_COMMAND")] SetPmuxCommand = 13,
        [pbr::OriginalName("SET_CONFIG_BYTE0_COMMAND")] SetConfigByte0Command = 14,
        [pbr::OriginalName("STOP_STREAMING_COMMAND")] StopStreamingCommand = 32,
        [pbr::OriginalName("SET_ACCEL_CALIBRATION_COMMAND")] SetAccelCalibrationCommand = 17,
        [pbr::OriginalName("SET_LSM303DLHC_ACCEL_CALIBRATION_COMMAND")] SetLsm303DlhcAccelCalibrationCommand = 26,
        [pbr::OriginalName("SET_GYRO_CALIBRATION_COMMAND")] SetGyroCalibrationCommand = 20,
        [pbr::OriginalName("SET_MAG_CALIBRATION_COMMAND")] SetMagCalibrationCommand = 23,
        [pbr::OriginalName("SET_GSR_RANGE_COMMAND")] SetGsrRangeCommand = 33,
        [pbr::OriginalName("SET_EMG_CALIBRATION_COMMAND")] SetEmgCalibrationCommand = 38,
        [pbr::OriginalName("SET_ECG_CALIBRATION_COMMAND")] SetEcgCalibrationCommand = 41,
        [pbr::OriginalName("SET_BLINK_LED")] SetBlinkLed = 48,
        [pbr::OriginalName("SET_GYRO_TEMP_VREF_COMMAND")] SetGyroTempVrefCommand = 51,
        [pbr::OriginalName("SET_BUFFER_SIZE_COMMAND")] SetBufferSizeCommand = 52,
        [pbr::OriginalName("SET_MAG_GAIN_COMMAND")] SetMagGainCommand = 55,
        [pbr::OriginalName("SET_MAG_SAMPLING_RATE_COMMAND")] SetMagSamplingRateCommand = 58,
        [pbr::OriginalName("SET_ACCEL_SAMPLING_RATE_COMMAND")] SetAccelSamplingRateCommand = 64,
        [pbr::OriginalName("SET_LSM303DLHC_ACCEL_LPMODE_COMMAND")] SetLsm303DlhcAccelLpmodeCommand = 67,
        [pbr::OriginalName("SET_LSM303DLHC_ACCEL_HRMODE_COMMAND")] SetLsm303DlhcAccelHrmodeCommand = 70,
        [pbr::OriginalName("SET_MPU9150_GYRO_RANGE_COMMAND")] SetMpu9150GyroRangeCommand = 73,
        [pbr::OriginalName("SET_MPU9150_SAMPLING_RATE_COMMAND")] SetMpu9150SamplingRateCommand = 76,
        [pbr::OriginalName("SET_BMP180_PRES_RESOLUTION_COMMAND")] SetBmp180PresResolutionCommand = 82,
        [pbr::OriginalName("SET_BMP180_PRES_CALIBRATION_COMMAND")] SetBmp180PresCalibrationCommand = 85,
        [pbr::OriginalName("RESET_TO_DEFAULT_CONFIGURATION_COMMAND")] ResetToDefaultConfigurationCommand = 90,
        [pbr::OriginalName("RESET_CALIBRATION_VALUE_COMMAND")] ResetCalibrationValueCommand = 91,
        [pbr::OriginalName("SET_INTERNAL_EXP_POWER_ENABLE_COMMAND")] SetInternalExpPowerEnableCommand = 94,
        [pbr::OriginalName("SET_EXG_REGS_COMMAND")] SetExgRegsCommand = 97,
        [pbr::OriginalName("SET_BAUD_RATE_COMMAND")] SetBaudRateCommand = 106,
        [pbr::OriginalName("SET_DERIVED_CHANNEL_BYTES")] SetDerivedChannelBytes = 109,
        [pbr::OriginalName("START_SDBT_COMMAND")] StartSdbtCommand = 112,
        [pbr::OriginalName("SET_TRIAL_CONFIG_COMMAND")] SetTrialConfigCommand = 115,
        [pbr::OriginalName("SET_CENTER_COMMAND")] SetCenterCommand = 118,
        /// <summary>
        ///Shimmer Name
        /// </summary>
        [pbr::OriginalName("SET_SHIMMERNAME_COMMAND")] SetShimmernameCommand = 121,
        /// <summary>
        ///Experiment Name
        /// </summary>
        [pbr::OriginalName("SET_EXPID_COMMAND")] SetExpidCommand = 124,
        /// <summary>
        ///Shimmer ID in trial
        /// </summary>
        [pbr::OriginalName("SET_MYID_COMMAND")] SetMyidCommand = 127,
        [pbr::OriginalName("SET_NSHIMMER_COMMAND")] SetNshimmerCommand = 130,
        [pbr::OriginalName("SET_CONFIGTIME_COMMAND")] SetConfigtimeCommand = 133,
        [pbr::OriginalName("SET_INFOMEM_COMMAND")] SetInfomemCommand = 140,
        [pbr::OriginalName("SET_CRC_COMMAND")] SetCrcCommand = 139,
        [pbr::OriginalName("SET_RWC_COMMAND")] SetRwcCommand = 143,
        [pbr::OriginalName("ROUTINE_COMMUNICATION")] RoutineCommunication = 224,
        [pbr::OriginalName("ACK_COMMAND_PROCESSED")] AckCommandProcessed = 255,
        [pbr::OriginalName("START_LOGGING_ONLY_COMMAND")] StartLoggingOnlyCommand = 146,
        [pbr::OriginalName("STOP_LOGGING_ONLY_COMMAND")] StopLoggingOnlyCommand = 147,
        [pbr::OriginalName("TEST_CONNECTION_COMMAND")] TestConnectionCommand = 150,
        [pbr::OriginalName("STOP_SDBT_COMMAND")] StopSdbtCommand = 151,
        [pbr::OriginalName("SET_CALIB_DUMP_COMMAND")] SetCalibDumpCommand = 152,
        [pbr::OriginalName("UPD_CONFIG_MEMORY_COMMAND")] UpdConfigMemoryCommand = 155,
        [pbr::OriginalName("SET_I2C_BATT_STATUS_FREQ_COMMAND_VALUE")] SetI2CBattStatusFreqCommandValue = 156,
      }

      public enum InstructionsGet {
        /// <summary>
        ///protobuf requirement to have a 0
        /// </summary>
        [pbr::OriginalName("NOT_USED_GET")] NotUsedGet = 0,
        [pbr::OriginalName("INQUIRY_COMMAND")] InquiryCommand = 1,
        [pbr::OriginalName("GET_SAMPLING_RATE_COMMAND")] GetSamplingRateCommand = 3,
        [pbr::OriginalName("GET_ACCEL_SENSITIVITY_COMMAND")] GetAccelSensitivityCommand = 11,
        [pbr::OriginalName("GET_CONFIG_BYTE0_COMMAND")] GetConfigByte0Command = 16,
        [pbr::OriginalName("GET_LSM303DLHC_ACCEL_CALIBRATION_COMMAND")] GetLsm303DlhcAccelCalibrationCommand = 28,
        [pbr::OriginalName("GET_ACCEL_CALIBRATION_COMMAND")] GetAccelCalibrationCommand = 19,
        [pbr::OriginalName("GET_GYRO_CALIBRATION_COMMAND")] GetGyroCalibrationCommand = 22,
        [pbr::OriginalName("GET_MAG_CALIBRATION_COMMAND")] GetMagCalibrationCommand = 25,
        [pbr::OriginalName("GET_GSR_RANGE_COMMAND")] GetGsrRangeCommand = 35,
        [pbr::OriginalName("GET_SHIMMER_VERSION_COMMAND")] GetShimmerVersionCommand = 36,
        /// <summary>
        ///this is to avoid the $ char which is used by rn42
        /// </summary>
        [pbr::OriginalName("GET_SHIMMER_VERSION_COMMAND_NEW")] GetShimmerVersionCommandNew = 63,
        [pbr::OriginalName("GET_EMG_CALIBRATION_COMMAND")] GetEmgCalibrationCommand = 40,
        [pbr::OriginalName("GET_ECG_CALIBRATION_COMMAND")] GetEcgCalibrationCommand = 43,
        [pbr::OriginalName("GET_ALL_CALIBRATION_COMMAND")] GetAllCalibrationCommand = 44,
        [pbr::OriginalName("GET_FW_VERSION_COMMAND")] GetFwVersionCommand = 46,
        [pbr::OriginalName("GET_BLINK_LED")] GetBlinkLed = 50,
        [pbr::OriginalName("GET_BUFFER_SIZE_COMMAND")] GetBufferSizeCommand = 54,
        [pbr::OriginalName("GET_MAG_GAIN_COMMAND")] GetMagGainCommand = 57,
        [pbr::OriginalName("GET_MAG_SAMPLING_RATE_COMMAND")] GetMagSamplingRateCommand = 60,
        [pbr::OriginalName("GET_ACCEL_SAMPLING_RATE_COMMAND")] GetAccelSamplingRateCommand = 66,
        [pbr::OriginalName("GET_LSM303DLHC_ACCEL_LPMODE_COMMAND")] GetLsm303DlhcAccelLpmodeCommand = 69,
        [pbr::OriginalName("GET_LSM303DLHC_ACCEL_HRMODE_COMMAND")] GetLsm303DlhcAccelHrmodeCommand = 72,
        [pbr::OriginalName("GET_MPU9150_GYRO_RANGE_COMMAND")] GetMpu9150GyroRangeCommand = 75,
        [pbr::OriginalName("GET_MPU9150_SAMPLING_RATE_COMMAND")] GetMpu9150SamplingRateCommand = 78,
        [pbr::OriginalName("GET_BMP180_PRES_RESOLUTION_COMMAND")] GetBmp180PresResolutionCommand = 84,
        [pbr::OriginalName("GET_BMP180_PRES_CALIBRATION_COMMAND")] GetBmp180PresCalibrationCommand = 87,
        [pbr::OriginalName("GET_BMP180_CALIBRATION_COEFFICIENTS_COMMAND")] GetBmp180CalibrationCoefficientsCommand = 89,
        [pbr::OriginalName("GET_MPU9150_MAG_SENS_ADJ_VALS_COMMAND")] GetMpu9150MagSensAdjValsCommand = 93,
        [pbr::OriginalName("GET_INTERNAL_EXP_POWER_ENABLE_COMMAND")] GetInternalExpPowerEnableCommand = 96,
        [pbr::OriginalName("GET_EXG_REGS_COMMAND")] GetExgRegsCommand = 99,
        [pbr::OriginalName("GET_DAUGHTER_CARD_ID_COMMAND")] GetDaughterCardIdCommand = 102,
        [pbr::OriginalName("GET_BAUD_RATE_COMMAND")] GetBaudRateCommand = 108,
        [pbr::OriginalName("GET_DERIVED_CHANNEL_BYTES")] GetDerivedChannelBytes = 111,
        [pbr::OriginalName("GET_STATUS_COMMAND")] GetStatusCommand = 114,
        [pbr::OriginalName("GET_TRIAL_CONFIG_COMMAND")] GetTrialConfigCommand = 117,
        [pbr::OriginalName("GET_CENTER_COMMAND")] GetCenterCommand = 120,
        [pbr::OriginalName("GET_SHIMMERNAME_COMMAND")] GetShimmernameCommand = 123,
        [pbr::OriginalName("GET_EXPID_COMMAND")] GetExpidCommand = 126,
        [pbr::OriginalName("GET_MYID_COMMAND")] GetMyidCommand = 129,
        [pbr::OriginalName("GET_NSHIMMER_COMMAND")] GetNshimmerCommand = 132,
        [pbr::OriginalName("GET_CONFIGTIME_COMMAND")] GetConfigtimeCommand = 135,
        [pbr::OriginalName("GET_DIR_COMMAND")] GetDirCommand = 137,
        [pbr::OriginalName("GET_INFOMEM_COMMAND")] GetInfomemCommand = 142,
        [pbr::OriginalName("GET_RWC_COMMAND")] GetRwcCommand = 145,
        [pbr::OriginalName("GET_VBATT_COMMAND")] GetVbattCommand = 149,
        [pbr::OriginalName("GET_CALIB_DUMP_COMMAND")] GetCalibDumpCommand = 154,
        [pbr::OriginalName("GET_I2C_BATT_STATUS_COMMAND_VALUE")] GetI2CBattStatusCommandValue = 158,
        [pbr::OriginalName("GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND")] GetBmp280CalibrationCoefficientsCommand = 159,
      }

      public enum InstructionsResponse {
        [pbr::OriginalName("NOT_USED_RESPONSE")] NotUsedResponse = 0,
        [pbr::OriginalName("INQUIRY_RESPONSE")] InquiryResponse = 2,
        [pbr::OriginalName("SAMPLING_RATE_RESPONSE")] SamplingRateResponse = 4,
        [pbr::OriginalName("ACCEL_SENSITIVITY_RESPONSE")] AccelSensitivityResponse = 10,
        [pbr::OriginalName("CONFIG_BYTE0_RESPONSE")] ConfigByte0Response = 15,
        [pbr::OriginalName("ACCEL_CALIBRATION_RESPONSE")] AccelCalibrationResponse = 18,
        [pbr::OriginalName("LSM303DLHC_ACCEL_CALIBRATION_RESPONSE")] Lsm303DlhcAccelCalibrationResponse = 27,
        [pbr::OriginalName("GYRO_CALIBRATION_RESPONSE")] GyroCalibrationResponse = 21,
        [pbr::OriginalName("MAG_CALIBRATION_RESPONSE")] MagCalibrationResponse = 24,
        [pbr::OriginalName("GSR_RANGE_RESPONSE")] GsrRangeResponse = 34,
        [pbr::OriginalName("GET_SHIMMER_VERSION_RESPONSE")] GetShimmerVersionResponse = 37,
        [pbr::OriginalName("EMG_CALIBRATION_RESPONSE")] EmgCalibrationResponse = 39,
        [pbr::OriginalName("ECG_CALIBRATION_RESPONSE")] EcgCalibrationResponse = 42,
        [pbr::OriginalName("ALL_CALIBRATION_RESPONSE")] AllCalibrationResponse = 45,
        [pbr::OriginalName("FW_VERSION_RESPONSE")] FwVersionResponse = 47,
        [pbr::OriginalName("BLINK_LED_RESPONSE")] BlinkLedResponse = 49,
        [pbr::OriginalName("BUFFER_SIZE_RESPONSE")] BufferSizeResponse = 53,
        [pbr::OriginalName("MAG_GAIN_RESPONSE")] MagGainResponse = 56,
        [pbr::OriginalName("MAG_SAMPLING_RATE_RESPONSE")] MagSamplingRateResponse = 59,
        [pbr::OriginalName("ACCEL_SAMPLING_RATE_RESPONSE")] AccelSamplingRateResponse = 65,
        [pbr::OriginalName("LSM303DLHC_ACCEL_LPMODE_RESPONSE")] Lsm303DlhcAccelLpmodeResponse = 68,
        [pbr::OriginalName("LSM303DLHC_ACCEL_HRMODE_RESPONSE")] Lsm303DlhcAccelHrmodeResponse = 71,
        [pbr::OriginalName("MPU9150_GYRO_RANGE_RESPONSE")] Mpu9150GyroRangeResponse = 74,
        [pbr::OriginalName("MPU9150_SAMPLING_RATE_RESPONSE")] Mpu9150SamplingRateResponse = 77,
        [pbr::OriginalName("BMP180_PRES_RESOLUTION_RESPONSE")] Bmp180PresResolutionResponse = 83,
        /// <summary>
        ///not used
        /// </summary>
        [pbr::OriginalName("BMP180_PRES_CALIBRATION_RESPONSE")] Bmp180PresCalibrationResponse = 86,
        [pbr::OriginalName("BMP180_CALIBRATION_COEFFICIENTS_RESPONSE")] Bmp180CalibrationCoefficientsResponse = 88,
        /// <summary>
        ///not used
        /// </summary>
        [pbr::OriginalName("MPU9150_MAG_SENS_ADJ_VALS_RESPONSE")] Mpu9150MagSensAdjValsResponse = 92,
        [pbr::OriginalName("INTERNAL_EXP_POWER_ENABLE_RESPONSE")] InternalExpPowerEnableResponse = 95,
        [pbr::OriginalName("EXG_REGS_RESPONSE")] ExgRegsResponse = 98,
        [pbr::OriginalName("DAUGHTER_CARD_ID_RESPONSE")] DaughterCardIdResponse = 101,
        [pbr::OriginalName("BAUD_RATE_RESPONSE")] BaudRateResponse = 107,
        [pbr::OriginalName("DERIVED_CHANNEL_BYTES_RESPONSE")] DerivedChannelBytesResponse = 110,
        [pbr::OriginalName("STATUS_RESPONSE")] StatusResponse = 113,
        [pbr::OriginalName("TRIAL_CONFIG_RESPONSE")] TrialConfigResponse = 116,
        [pbr::OriginalName("CENTER_RESPONSE")] CenterResponse = 119,
        [pbr::OriginalName("SHIMMERNAME_RESPONSE")] ShimmernameResponse = 122,
        [pbr::OriginalName("EXPID_RESPONSE")] ExpidResponse = 125,
        [pbr::OriginalName("MYID_RESPONSE")] MyidResponse = 128,
        [pbr::OriginalName("NSHIMMER_RESPONSE")] NshimmerResponse = 131,
        [pbr::OriginalName("CONFIGTIME_RESPONSE")] ConfigtimeResponse = 134,
        [pbr::OriginalName("DIR_RESPONSE")] DirResponse = 136,
        /// <summary>
        /// no following byte
        /// </summary>
        [pbr::OriginalName("INSTREAM_CMD_RESPONSE")] InstreamCmdResponse = 138,
        [pbr::OriginalName("INFOMEM_RESPONSE")] InfomemResponse = 141,
        [pbr::OriginalName("RWC_RESPONSE")] RwcResponse = 144,
        [pbr::OriginalName("VBATT_RESPONSE")] VbattResponse = 148,
        [pbr::OriginalName("RSP_CALIB_DUMP_COMMAND")] RspCalibDumpCommand = 153,
        [pbr::OriginalName("RSP_I2C_BATT_STATUS_COMMAND_VALUE")] RspI2CBattStatusCommandValue = 157,
        [pbr::OriginalName("BMP280_CALIBRATION_COEFFICIENTS_RESPONSE")] Bmp280CalibrationCoefficientsResponse = 160,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
