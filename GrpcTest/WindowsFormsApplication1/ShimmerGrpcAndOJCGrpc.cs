// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: src/ShimmerGrpcAndOJC.proto
// </auto-generated>
// Original file comments:
// import "C:/Users/Lim/git/Shimmer-Java-Android-API/ShimmerDriver/grpcprotosrc/src/LiteProtocolInstructionSet.proto";
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace com.shimmerresearch.grpc {
  /// <summary>
  /// The greeter service definition.
  /// </summary>
  public static partial class ShimmerServer
  {
    static readonly string __ServiceName = "shimmerGRPC.ShimmerServer";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::com.shimmerresearch.grpc.HelloRequest> __Marshaller_shimmerGRPC_HelloRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.shimmerresearch.grpc.HelloRequest.Parser));
    static readonly grpc::Marshaller<global::com.shimmerresearch.grpc.HelloReply> __Marshaller_shimmerGRPC_HelloReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.shimmerresearch.grpc.HelloReply.Parser));
    static readonly grpc::Marshaller<global::com.shimmerresearch.grpc.StreamRequest> __Marshaller_shimmerGRPC_StreamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.shimmerresearch.grpc.StreamRequest.Parser));
    static readonly grpc::Marshaller<global::com.shimmerresearch.grpc.ObjectCluster2> __Marshaller_shimmerGRPC_ObjectCluster2 = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.shimmerresearch.grpc.ObjectCluster2.Parser));
    static readonly grpc::Marshaller<global::com.shimmerresearch.grpc.FileByteTransfer> __Marshaller_shimmerGRPC_FileByteTransfer = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.shimmerresearch.grpc.FileByteTransfer.Parser));
    static readonly grpc::Marshaller<global::com.shimmerresearch.grpc.ShimmerRequest> __Marshaller_shimmerGRPC_ShimmerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.shimmerresearch.grpc.ShimmerRequest.Parser));
    static readonly grpc::Marshaller<global::com.shimmerresearch.grpc.CommandStatus> __Marshaller_shimmerGRPC_CommandStatus = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.shimmerresearch.grpc.CommandStatus.Parser));
    static readonly grpc::Marshaller<global::com.shimmerresearch.grpc.StringMsg> __Marshaller_shimmerGRPC_StringMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.shimmerresearch.grpc.StringMsg.Parser));
    static readonly grpc::Marshaller<global::com.shimmerresearch.grpc.OperationRequest> __Marshaller_shimmerGRPC_OperationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.shimmerresearch.grpc.OperationRequest.Parser));
    static readonly grpc::Marshaller<global::com.shimmerresearch.grpc.ShimmersInfo> __Marshaller_shimmerGRPC_ShimmersInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.shimmerresearch.grpc.ShimmersInfo.Parser));
    static readonly grpc::Marshaller<global::com.shimmerresearch.grpc.DoubleMsg> __Marshaller_shimmerGRPC_DoubleMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.shimmerresearch.grpc.DoubleMsg.Parser));
    static readonly grpc::Marshaller<global::com.shimmerresearch.grpc.StringArrayMsg> __Marshaller_shimmerGRPC_StringArrayMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.shimmerresearch.grpc.StringArrayMsg.Parser));
    static readonly grpc::Marshaller<global::com.shimmerresearch.grpc.InfoSpans> __Marshaller_shimmerGRPC_InfoSpans = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.shimmerresearch.grpc.InfoSpans.Parser));
    static readonly grpc::Marshaller<global::com.shimmerresearch.grpc.EmulatedDevices> __Marshaller_shimmerGRPC_EmulatedDevices = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.shimmerresearch.grpc.EmulatedDevices.Parser));

    static readonly grpc::Method<global::com.shimmerresearch.grpc.HelloRequest, global::com.shimmerresearch.grpc.HelloReply> __Method_SayHello = new grpc::Method<global::com.shimmerresearch.grpc.HelloRequest, global::com.shimmerresearch.grpc.HelloReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SayHello",
        __Marshaller_shimmerGRPC_HelloRequest,
        __Marshaller_shimmerGRPC_HelloReply);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StreamRequest, global::com.shimmerresearch.grpc.ObjectCluster2> __Method_GetDataStream = new grpc::Method<global::com.shimmerresearch.grpc.StreamRequest, global::com.shimmerresearch.grpc.ObjectCluster2>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetDataStream",
        __Marshaller_shimmerGRPC_StreamRequest,
        __Marshaller_shimmerGRPC_ObjectCluster2);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.ObjectCluster2, global::com.shimmerresearch.grpc.HelloReply> __Method_SendDataStream = new grpc::Method<global::com.shimmerresearch.grpc.ObjectCluster2, global::com.shimmerresearch.grpc.HelloReply>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "SendDataStream",
        __Marshaller_shimmerGRPC_ObjectCluster2,
        __Marshaller_shimmerGRPC_HelloReply);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.FileByteTransfer, global::com.shimmerresearch.grpc.HelloReply> __Method_SendFileStream = new grpc::Method<global::com.shimmerresearch.grpc.FileByteTransfer, global::com.shimmerresearch.grpc.HelloReply>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "SendFileStream",
        __Marshaller_shimmerGRPC_FileByteTransfer,
        __Marshaller_shimmerGRPC_HelloReply);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.ShimmerRequest, global::com.shimmerresearch.grpc.CommandStatus> __Method_ConnectShimmer = new grpc::Method<global::com.shimmerresearch.grpc.ShimmerRequest, global::com.shimmerresearch.grpc.CommandStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConnectShimmer",
        __Marshaller_shimmerGRPC_ShimmerRequest,
        __Marshaller_shimmerGRPC_CommandStatus);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.ShimmerRequest, global::com.shimmerresearch.grpc.CommandStatus> __Method_DisconnectShimmer = new grpc::Method<global::com.shimmerresearch.grpc.ShimmerRequest, global::com.shimmerresearch.grpc.CommandStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DisconnectShimmer",
        __Marshaller_shimmerGRPC_ShimmerRequest,
        __Marshaller_shimmerGRPC_CommandStatus);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.ShimmerRequest, global::com.shimmerresearch.grpc.CommandStatus> __Method_StartStreaming = new grpc::Method<global::com.shimmerresearch.grpc.ShimmerRequest, global::com.shimmerresearch.grpc.CommandStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartStreaming",
        __Marshaller_shimmerGRPC_ShimmerRequest,
        __Marshaller_shimmerGRPC_CommandStatus);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.ShimmerRequest, global::com.shimmerresearch.grpc.CommandStatus> __Method_StopStreaming = new grpc::Method<global::com.shimmerresearch.grpc.ShimmerRequest, global::com.shimmerresearch.grpc.CommandStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopStreaming",
        __Marshaller_shimmerGRPC_ShimmerRequest,
        __Marshaller_shimmerGRPC_CommandStatus);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.ShimmerRequest, global::com.shimmerresearch.grpc.CommandStatus> __Method_CloseApplication = new grpc::Method<global::com.shimmerresearch.grpc.ShimmerRequest, global::com.shimmerresearch.grpc.CommandStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CloseApplication",
        __Marshaller_shimmerGRPC_ShimmerRequest,
        __Marshaller_shimmerGRPC_CommandStatus);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.OperationRequest> __Method_SetWorkspaceDirectory = new grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.OperationRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetWorkspaceDirectory",
        __Marshaller_shimmerGRPC_StringMsg,
        __Marshaller_shimmerGRPC_OperationRequest);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.StringMsg> __Method_GetWorkspaceDirectory = new grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.StringMsg>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkspaceDirectory",
        __Marshaller_shimmerGRPC_StringMsg,
        __Marshaller_shimmerGRPC_StringMsg);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.ShimmersInfo> __Method_GetDockedShimmerInfo = new grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.ShimmersInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDockedShimmerInfo",
        __Marshaller_shimmerGRPC_StringMsg,
        __Marshaller_shimmerGRPC_ShimmersInfo);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.DoubleMsg> __Method_GetMadgewickBetaValue = new grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.DoubleMsg>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMadgewickBetaValue",
        __Marshaller_shimmerGRPC_StringMsg,
        __Marshaller_shimmerGRPC_DoubleMsg);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest> __Method_PairShimmers = new grpc::Method<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PairShimmers",
        __Marshaller_shimmerGRPC_StringArrayMsg,
        __Marshaller_shimmerGRPC_OperationRequest);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.OperationRequest> __Method_GetOperationProgress = new grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.OperationRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOperationProgress",
        __Marshaller_shimmerGRPC_StringMsg,
        __Marshaller_shimmerGRPC_OperationRequest);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest> __Method_ImportSdDataFromShimmers = new grpc::Method<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ImportSdDataFromShimmers",
        __Marshaller_shimmerGRPC_StringArrayMsg,
        __Marshaller_shimmerGRPC_OperationRequest);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.OperationRequest> __Method_ParseSdDataFromPath = new grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.OperationRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ParseSdDataFromPath",
        __Marshaller_shimmerGRPC_StringMsg,
        __Marshaller_shimmerGRPC_OperationRequest);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest> __Method_ScanSdDataAndCopy = new grpc::Method<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScanSdDataAndCopy",
        __Marshaller_shimmerGRPC_StringArrayMsg,
        __Marshaller_shimmerGRPC_OperationRequest);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest> __Method_ClearSdCardData = new grpc::Method<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClearSdCardData",
        __Marshaller_shimmerGRPC_StringArrayMsg,
        __Marshaller_shimmerGRPC_OperationRequest);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest> __Method_DockAccessSlotWithSdCard = new grpc::Method<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DockAccessSlotWithSdCard",
        __Marshaller_shimmerGRPC_StringArrayMsg,
        __Marshaller_shimmerGRPC_OperationRequest);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest> __Method_DockRestoreAutoTasks = new grpc::Method<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DockRestoreAutoTasks",
        __Marshaller_shimmerGRPC_StringArrayMsg,
        __Marshaller_shimmerGRPC_OperationRequest);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.InfoSpans> __Method_GetInfoSpans = new grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.InfoSpans>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInfoSpans",
        __Marshaller_shimmerGRPC_StringMsg,
        __Marshaller_shimmerGRPC_InfoSpans);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.ShimmersInfo> __Method_GetInfoAllShimmers = new grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.ShimmersInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInfoAllShimmers",
        __Marshaller_shimmerGRPC_StringMsg,
        __Marshaller_shimmerGRPC_ShimmersInfo);

    static readonly grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.EmulatedDevices> __Method_GetEmulatedDevices = new grpc::Method<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.EmulatedDevices>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEmulatedDevices",
        __Marshaller_shimmerGRPC_StringMsg,
        __Marshaller_shimmerGRPC_EmulatedDevices);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::com.shimmerresearch.grpc.ShimmerGrpcAndOJCReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ShimmerServer</summary>
    [grpc::BindServiceMethod(typeof(ShimmerServer), "BindService")]
    public abstract partial class ShimmerServerBase
    {
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.HelloReply> SayHello(global::com.shimmerresearch.grpc.HelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Client asking for data
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetDataStream(global::com.shimmerresearch.grpc.StreamRequest request, grpc::IServerStreamWriter<global::com.shimmerresearch.grpc.ObjectCluster2> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Client sending data
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.HelloReply> SendDataStream(grpc::IAsyncStreamReader<global::com.shimmerresearch.grpc.ObjectCluster2> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.HelloReply> SendFileStream(grpc::IAsyncStreamReader<global::com.shimmerresearch.grpc.FileByteTransfer> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.CommandStatus> ConnectShimmer(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.CommandStatus> DisconnectShimmer(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.CommandStatus> StartStreaming(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.CommandStatus> StopStreaming(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.CommandStatus> CloseApplication(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///ConsensysApi related
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.OperationRequest> SetWorkspaceDirectory(global::com.shimmerresearch.grpc.StringMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.StringMsg> GetWorkspaceDirectory(global::com.shimmerresearch.grpc.StringMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.ShimmersInfo> GetDockedShimmerInfo(global::com.shimmerresearch.grpc.StringMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.DoubleMsg> GetMadgewickBetaValue(global::com.shimmerresearch.grpc.StringMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.OperationRequest> PairShimmers(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.OperationRequest> GetOperationProgress(global::com.shimmerresearch.grpc.StringMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.OperationRequest> ImportSdDataFromShimmers(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.OperationRequest> ParseSdDataFromPath(global::com.shimmerresearch.grpc.StringMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.OperationRequest> ScanSdDataAndCopy(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.OperationRequest> ClearSdCardData(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.OperationRequest> DockAccessSlotWithSdCard(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.OperationRequest> DockRestoreAutoTasks(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Shimmer device emulation software related
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.InfoSpans> GetInfoSpans(global::com.shimmerresearch.grpc.StringMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.ShimmersInfo> GetInfoAllShimmers(global::com.shimmerresearch.grpc.StringMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::com.shimmerresearch.grpc.EmulatedDevices> GetEmulatedDevices(global::com.shimmerresearch.grpc.StringMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ShimmerServer</summary>
    public partial class ShimmerServerClient : grpc::ClientBase<ShimmerServerClient>
    {
      /// <summary>Creates a new client for ShimmerServer</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ShimmerServerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ShimmerServer that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ShimmerServerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ShimmerServerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ShimmerServerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.shimmerresearch.grpc.HelloReply SayHello(global::com.shimmerresearch.grpc.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.shimmerresearch.grpc.HelloReply SayHello(global::com.shimmerresearch.grpc.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SayHello, null, options, request);
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.HelloReply> SayHelloAsync(global::com.shimmerresearch.grpc.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.HelloReply> SayHelloAsync(global::com.shimmerresearch.grpc.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SayHello, null, options, request);
      }
      /// <summary>
      ///Client asking for data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::com.shimmerresearch.grpc.ObjectCluster2> GetDataStream(global::com.shimmerresearch.grpc.StreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Client asking for data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::com.shimmerresearch.grpc.ObjectCluster2> GetDataStream(global::com.shimmerresearch.grpc.StreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetDataStream, null, options, request);
      }
      /// <summary>
      ///Client sending data
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::com.shimmerresearch.grpc.ObjectCluster2, global::com.shimmerresearch.grpc.HelloReply> SendDataStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendDataStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Client sending data
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::com.shimmerresearch.grpc.ObjectCluster2, global::com.shimmerresearch.grpc.HelloReply> SendDataStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_SendDataStream, null, options);
      }
      public virtual grpc::AsyncClientStreamingCall<global::com.shimmerresearch.grpc.FileByteTransfer, global::com.shimmerresearch.grpc.HelloReply> SendFileStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendFileStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::com.shimmerresearch.grpc.FileByteTransfer, global::com.shimmerresearch.grpc.HelloReply> SendFileStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_SendFileStream, null, options);
      }
      public virtual global::com.shimmerresearch.grpc.CommandStatus ConnectShimmer(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectShimmer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.CommandStatus ConnectShimmer(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConnectShimmer, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.CommandStatus> ConnectShimmerAsync(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectShimmerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.CommandStatus> ConnectShimmerAsync(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConnectShimmer, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.CommandStatus DisconnectShimmer(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisconnectShimmer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.CommandStatus DisconnectShimmer(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DisconnectShimmer, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.CommandStatus> DisconnectShimmerAsync(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisconnectShimmerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.CommandStatus> DisconnectShimmerAsync(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DisconnectShimmer, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.CommandStatus StartStreaming(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartStreaming(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.CommandStatus StartStreaming(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartStreaming, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.CommandStatus> StartStreamingAsync(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartStreamingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.CommandStatus> StartStreamingAsync(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartStreaming, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.CommandStatus StopStreaming(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopStreaming(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.CommandStatus StopStreaming(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopStreaming, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.CommandStatus> StopStreamingAsync(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopStreamingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.CommandStatus> StopStreamingAsync(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopStreaming, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.CommandStatus CloseApplication(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CloseApplication(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.CommandStatus CloseApplication(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CloseApplication, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.CommandStatus> CloseApplicationAsync(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CloseApplicationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.CommandStatus> CloseApplicationAsync(global::com.shimmerresearch.grpc.ShimmerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CloseApplication, null, options, request);
      }
      /// <summary>
      ///ConsensysApi related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.shimmerresearch.grpc.OperationRequest SetWorkspaceDirectory(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetWorkspaceDirectory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///ConsensysApi related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.shimmerresearch.grpc.OperationRequest SetWorkspaceDirectory(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetWorkspaceDirectory, null, options, request);
      }
      /// <summary>
      ///ConsensysApi related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> SetWorkspaceDirectoryAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetWorkspaceDirectoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///ConsensysApi related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> SetWorkspaceDirectoryAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetWorkspaceDirectory, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.StringMsg GetWorkspaceDirectory(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkspaceDirectory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.StringMsg GetWorkspaceDirectory(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkspaceDirectory, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.StringMsg> GetWorkspaceDirectoryAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkspaceDirectoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.StringMsg> GetWorkspaceDirectoryAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkspaceDirectory, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.ShimmersInfo GetDockedShimmerInfo(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDockedShimmerInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.ShimmersInfo GetDockedShimmerInfo(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDockedShimmerInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.ShimmersInfo> GetDockedShimmerInfoAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDockedShimmerInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.ShimmersInfo> GetDockedShimmerInfoAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDockedShimmerInfo, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.DoubleMsg GetMadgewickBetaValue(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMadgewickBetaValue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.DoubleMsg GetMadgewickBetaValue(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMadgewickBetaValue, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.DoubleMsg> GetMadgewickBetaValueAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMadgewickBetaValueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.DoubleMsg> GetMadgewickBetaValueAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMadgewickBetaValue, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest PairShimmers(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PairShimmers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest PairShimmers(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PairShimmers, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> PairShimmersAsync(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PairShimmersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> PairShimmersAsync(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PairShimmers, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest GetOperationProgress(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOperationProgress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest GetOperationProgress(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOperationProgress, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> GetOperationProgressAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOperationProgressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> GetOperationProgressAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOperationProgress, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest ImportSdDataFromShimmers(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportSdDataFromShimmers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest ImportSdDataFromShimmers(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImportSdDataFromShimmers, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> ImportSdDataFromShimmersAsync(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportSdDataFromShimmersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> ImportSdDataFromShimmersAsync(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImportSdDataFromShimmers, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest ParseSdDataFromPath(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParseSdDataFromPath(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest ParseSdDataFromPath(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ParseSdDataFromPath, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> ParseSdDataFromPathAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParseSdDataFromPathAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> ParseSdDataFromPathAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ParseSdDataFromPath, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest ScanSdDataAndCopy(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanSdDataAndCopy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest ScanSdDataAndCopy(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScanSdDataAndCopy, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> ScanSdDataAndCopyAsync(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanSdDataAndCopyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> ScanSdDataAndCopyAsync(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScanSdDataAndCopy, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest ClearSdCardData(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearSdCardData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest ClearSdCardData(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClearSdCardData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> ClearSdCardDataAsync(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearSdCardDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> ClearSdCardDataAsync(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClearSdCardData, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest DockAccessSlotWithSdCard(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DockAccessSlotWithSdCard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest DockAccessSlotWithSdCard(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DockAccessSlotWithSdCard, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> DockAccessSlotWithSdCardAsync(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DockAccessSlotWithSdCardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> DockAccessSlotWithSdCardAsync(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DockAccessSlotWithSdCard, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest DockRestoreAutoTasks(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DockRestoreAutoTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.OperationRequest DockRestoreAutoTasks(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DockRestoreAutoTasks, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> DockRestoreAutoTasksAsync(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DockRestoreAutoTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.OperationRequest> DockRestoreAutoTasksAsync(global::com.shimmerresearch.grpc.StringArrayMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DockRestoreAutoTasks, null, options, request);
      }
      /// <summary>
      ///Shimmer device emulation software related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.shimmerresearch.grpc.InfoSpans GetInfoSpans(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInfoSpans(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Shimmer device emulation software related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.shimmerresearch.grpc.InfoSpans GetInfoSpans(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInfoSpans, null, options, request);
      }
      /// <summary>
      ///Shimmer device emulation software related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.InfoSpans> GetInfoSpansAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInfoSpansAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Shimmer device emulation software related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.InfoSpans> GetInfoSpansAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInfoSpans, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.ShimmersInfo GetInfoAllShimmers(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInfoAllShimmers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.ShimmersInfo GetInfoAllShimmers(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInfoAllShimmers, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.ShimmersInfo> GetInfoAllShimmersAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInfoAllShimmersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.ShimmersInfo> GetInfoAllShimmersAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInfoAllShimmers, null, options, request);
      }
      public virtual global::com.shimmerresearch.grpc.EmulatedDevices GetEmulatedDevices(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEmulatedDevices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::com.shimmerresearch.grpc.EmulatedDevices GetEmulatedDevices(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEmulatedDevices, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.EmulatedDevices> GetEmulatedDevicesAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEmulatedDevicesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::com.shimmerresearch.grpc.EmulatedDevices> GetEmulatedDevicesAsync(global::com.shimmerresearch.grpc.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEmulatedDevices, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ShimmerServerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ShimmerServerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ShimmerServerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SayHello, serviceImpl.SayHello)
          .AddMethod(__Method_GetDataStream, serviceImpl.GetDataStream)
          .AddMethod(__Method_SendDataStream, serviceImpl.SendDataStream)
          .AddMethod(__Method_SendFileStream, serviceImpl.SendFileStream)
          .AddMethod(__Method_ConnectShimmer, serviceImpl.ConnectShimmer)
          .AddMethod(__Method_DisconnectShimmer, serviceImpl.DisconnectShimmer)
          .AddMethod(__Method_StartStreaming, serviceImpl.StartStreaming)
          .AddMethod(__Method_StopStreaming, serviceImpl.StopStreaming)
          .AddMethod(__Method_CloseApplication, serviceImpl.CloseApplication)
          .AddMethod(__Method_SetWorkspaceDirectory, serviceImpl.SetWorkspaceDirectory)
          .AddMethod(__Method_GetWorkspaceDirectory, serviceImpl.GetWorkspaceDirectory)
          .AddMethod(__Method_GetDockedShimmerInfo, serviceImpl.GetDockedShimmerInfo)
          .AddMethod(__Method_GetMadgewickBetaValue, serviceImpl.GetMadgewickBetaValue)
          .AddMethod(__Method_PairShimmers, serviceImpl.PairShimmers)
          .AddMethod(__Method_GetOperationProgress, serviceImpl.GetOperationProgress)
          .AddMethod(__Method_ImportSdDataFromShimmers, serviceImpl.ImportSdDataFromShimmers)
          .AddMethod(__Method_ParseSdDataFromPath, serviceImpl.ParseSdDataFromPath)
          .AddMethod(__Method_ScanSdDataAndCopy, serviceImpl.ScanSdDataAndCopy)
          .AddMethod(__Method_ClearSdCardData, serviceImpl.ClearSdCardData)
          .AddMethod(__Method_DockAccessSlotWithSdCard, serviceImpl.DockAccessSlotWithSdCard)
          .AddMethod(__Method_DockRestoreAutoTasks, serviceImpl.DockRestoreAutoTasks)
          .AddMethod(__Method_GetInfoSpans, serviceImpl.GetInfoSpans)
          .AddMethod(__Method_GetInfoAllShimmers, serviceImpl.GetInfoAllShimmers)
          .AddMethod(__Method_GetEmulatedDevices, serviceImpl.GetEmulatedDevices).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ShimmerServerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SayHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.HelloRequest, global::com.shimmerresearch.grpc.HelloReply>(serviceImpl.SayHello));
      serviceBinder.AddMethod(__Method_GetDataStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::com.shimmerresearch.grpc.StreamRequest, global::com.shimmerresearch.grpc.ObjectCluster2>(serviceImpl.GetDataStream));
      serviceBinder.AddMethod(__Method_SendDataStream, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::com.shimmerresearch.grpc.ObjectCluster2, global::com.shimmerresearch.grpc.HelloReply>(serviceImpl.SendDataStream));
      serviceBinder.AddMethod(__Method_SendFileStream, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::com.shimmerresearch.grpc.FileByteTransfer, global::com.shimmerresearch.grpc.HelloReply>(serviceImpl.SendFileStream));
      serviceBinder.AddMethod(__Method_ConnectShimmer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.ShimmerRequest, global::com.shimmerresearch.grpc.CommandStatus>(serviceImpl.ConnectShimmer));
      serviceBinder.AddMethod(__Method_DisconnectShimmer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.ShimmerRequest, global::com.shimmerresearch.grpc.CommandStatus>(serviceImpl.DisconnectShimmer));
      serviceBinder.AddMethod(__Method_StartStreaming, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.ShimmerRequest, global::com.shimmerresearch.grpc.CommandStatus>(serviceImpl.StartStreaming));
      serviceBinder.AddMethod(__Method_StopStreaming, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.ShimmerRequest, global::com.shimmerresearch.grpc.CommandStatus>(serviceImpl.StopStreaming));
      serviceBinder.AddMethod(__Method_CloseApplication, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.ShimmerRequest, global::com.shimmerresearch.grpc.CommandStatus>(serviceImpl.CloseApplication));
      serviceBinder.AddMethod(__Method_SetWorkspaceDirectory, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.OperationRequest>(serviceImpl.SetWorkspaceDirectory));
      serviceBinder.AddMethod(__Method_GetWorkspaceDirectory, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.StringMsg>(serviceImpl.GetWorkspaceDirectory));
      serviceBinder.AddMethod(__Method_GetDockedShimmerInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.ShimmersInfo>(serviceImpl.GetDockedShimmerInfo));
      serviceBinder.AddMethod(__Method_GetMadgewickBetaValue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.DoubleMsg>(serviceImpl.GetMadgewickBetaValue));
      serviceBinder.AddMethod(__Method_PairShimmers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest>(serviceImpl.PairShimmers));
      serviceBinder.AddMethod(__Method_GetOperationProgress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.OperationRequest>(serviceImpl.GetOperationProgress));
      serviceBinder.AddMethod(__Method_ImportSdDataFromShimmers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest>(serviceImpl.ImportSdDataFromShimmers));
      serviceBinder.AddMethod(__Method_ParseSdDataFromPath, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.OperationRequest>(serviceImpl.ParseSdDataFromPath));
      serviceBinder.AddMethod(__Method_ScanSdDataAndCopy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest>(serviceImpl.ScanSdDataAndCopy));
      serviceBinder.AddMethod(__Method_ClearSdCardData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest>(serviceImpl.ClearSdCardData));
      serviceBinder.AddMethod(__Method_DockAccessSlotWithSdCard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest>(serviceImpl.DockAccessSlotWithSdCard));
      serviceBinder.AddMethod(__Method_DockRestoreAutoTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.StringArrayMsg, global::com.shimmerresearch.grpc.OperationRequest>(serviceImpl.DockRestoreAutoTasks));
      serviceBinder.AddMethod(__Method_GetInfoSpans, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.InfoSpans>(serviceImpl.GetInfoSpans));
      serviceBinder.AddMethod(__Method_GetInfoAllShimmers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.ShimmersInfo>(serviceImpl.GetInfoAllShimmers));
      serviceBinder.AddMethod(__Method_GetEmulatedDevices, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.shimmerresearch.grpc.StringMsg, global::com.shimmerresearch.grpc.EmulatedDevices>(serviceImpl.GetEmulatedDevices));
    }

  }
}
#endregion
